<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "urn:pubid:zenoss.com:doctypes:dita:dtd:reference" "reference.dtd">
<reference id="referenceid">
  <title>serviced service</title>
  <shortdesc>The <cmdname>serviced service</cmdname> command lets you manage an application's
    individual services.</shortdesc>
  <refbody>
    <section><!-- CC_3097 -->
      <p>Use this command to perform administrative actions on a specific service or view service status information.</p>
    </section>
    <section>
      <title>USAGE</title>
      <codeblock>serviced service [global options] command [command options] \
  [arguments...]</codeblock>
    </section>
    <section><title>COMMANDS</title>The following commands are available for <cmdname>serviced
        service</cmdname>:<dl>
        <dlentry>
          <dt>list</dt>
          <dd>List all services.</dd>
        </dlentry>
        <dlentry>
          <dt>status</dt>
          <dd>Display the status of deployed services.</dd>
          <!-- cc_3097: emergency stopped -->
          <dd>The status <codeph>emergency-stopped</codeph> indicates that <ph keyref="nm-cc"/>
            performed an emergency shutdown of the service due to low storage. Before you can
            restart the service, resolve the space issue, and then use  the
              <cmdname>clear-emergency</cmdname> command (listed below) to remove the
            emergency-shutdown flags. For more information, see <xref
              keyref="cc-feature-manage-emer-sdown-overview"/>.</dd>
        </dlentry>
        <dlentry>
          <dt>add</dt>
          <dd>Add a service.</dd>
        </dlentry>
        <dlentry><!--CC_3107-->
          <dt>clear-emergency</dt>
          <dd>After you have resolved the tenant space consumption that caused an emergency
            shutdown, reset emergency-shutdown flags to false for the service and all child
            services. <p>To check the status of the emergency shutdown flag, issue the following
              command:</p><codeblock>for s in $(serviced service list --show-fields ServiceID); \
     do serviced service list $s | grep EmergencyShutdown\"; done;
</codeblock><p>"True"
              indicates an emergency shutdown; "false" indicates that the flags have been cleared
              and you can restart the service.</p></dd>
        </dlentry>
        <dlentry>
          <dt>clone</dt>
          <dd>Clone a service.</dd>
        </dlentry>
        <dlentry>
          <dt>remove, rm</dt>
          <dd>Remove a  service.</dd>
        </dlentry>
        <dlentry>
          <dt>edit</dt>
          <dd>Edit a service in a text editor.</dd>
        </dlentry>
        <dlentry>
          <dt>assign-ip</dt>
          <dd>Assign an IP address to service endpoints that require an explicit IP address.</dd>
        </dlentry>
        <dlentry>
          <dt>start</dt> <!-- CC_3201 -->
          <dd>Start one or more services. </dd>
        </dlentry>
        <dlentry>
          <dt>restart</dt>
          <!-- CC_3201 -->
          <dd>Restart one or more services. </dd>
        </dlentry>
        <dlentry>
          <dt>stop</dt>
          <!-- CC_3201 -->
          <dd>Stop one or more services.</dd>
        </dlentry>
        <dlentry>
          <dt>shell</dt>
          <dd>Start a service instance.</dd>
        </dlentry>
        <dlentry>
          <dt>run</dt>
          <dd>Run a service command in a service instance.</dd>
        </dlentry>
        <dlentry>
          <dt>attach</dt>
          <dd>Run an arbitrary command in a running service container.</dd>
        </dlentry>
        <dlentry>
          <dt>action</dt>
          <dd>Run a predefined action in a running service container.</dd>
        </dlentry>
        <dlentry>
          <dt>logs</dt>
          <dd>Display the log contents for a running service container by calling <codeph>docker
              logs</codeph>.</dd>
        </dlentry>
        <dlentry>
          <dt>list-snapshots</dt>
          <dd>List all snapshots of a service.</dd>
        </dlentry>
        <dlentry>
          <dt>snapshot</dt>
          <dd>Take a snapshot of a service.</dd>
        </dlentry>
        <dlentry>
          <dt>endpoints</dt>
          <dd>List the endpoints that are defined for a service.</dd>
        </dlentry>
        <dlentry>
          <dt>public-endpoints</dt>
          <dd>Manage public endpoints for a service.</dd>
        </dlentry>
        <dlentry>
          <dt>help, h</dt>
          <dd>Show a list of commands or the help for a single command.</dd>
        </dlentry>
      </dl></section>
    <section>
      <title>GLOBAL OPTIONS</title>
      <dl>
        <dlentry>
          <dt>--generate-bash-completion</dt>
          <dd/>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt>--help, -h</dt>
          <dd>Shows the help for an option.</dd>
        </dlentry>
      </dl>
    </section>
    <!--CC_2792-->
    <section>
      <title>serviced service [start | stop]</title>
      <p>By default, <ph keyref="nm-cc"/> schedules services in the background to start, and stop. The asynchronous scheduling improves the speed of these operations, especially in
        large-scale installations. However, if you use a script that depends on synchronous
        scheduling that was used in earlier versions of <ph keyref="nm-cc"/>, specify the command
        line option <cmdname>--sync</cmdname>.</p>
      <p>Syntax:</p>
      <codeblock>serviced service [start | stop] [-s|--sync] <varname>ServiceID</varname></codeblock>
      <p>Command option: <dl>
          <dlentry>
            <dt>--sync, -s</dt>
            <dd>Schedules services synchronously. Specify this flag if a script expects the
                <codeph>serviced service [start | stop]</codeph> command to wait to return
              until the service operation has been scheduled. If this flag is not specified,
              services are scheduled asynchronously, in the background. </dd>
          </dlentry>
        </dl></p>
    </section>
    <!--CC_2792, CC_3199_rebalance-->
    <section>
      <title>serviced service restart</title>
      <p>By default, <ph keyref="nm-cc"/> schedules services in the background to restart to improve the speed of the operation, especially in
        large-scale installations. However, if you use a script that depends on synchronous
        scheduling that was used in earlier versions of <ph keyref="nm-cc"/>, specify the command
        line option <cmdname>--sync</cmdname>.</p>
      <p>Syntax:</p>
      <codeblock>serviced service restart [<varname>commandOptions</varname>] \ 
    {<varname>ServiceID</varname> | <varname>instanceID</varname>}</codeblock>
      <p>Command option: <dl>
<!-- CC_344 -->
        <dlentry>
            <dt>--auto-launch</dt>
            <dd>Recursively schedules child services.</dd>
          </dlentry>
          <dlentry>
            <dt>--sync, -s</dt>
            <dd>Schedules services synchronously. Specify this flag if a script expects the
                <codeph>serviced service restart</codeph> command to wait to return until the
              service operation has been scheduled. If this flag is not specified, services are
              scheduled asynchronously, in the background. </dd>
          </dlentry>
          <dlentry>
            <dt>--rebalance</dt>
            <dd>Stops all instances of a service before restarting, instead of performing a rolling
              restart.</dd>
          </dlentry>
        </dl>
      </p>
      <p/>
    </section>
  </refbody>
</reference>
