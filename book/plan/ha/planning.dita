<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "urn:pubid:zenoss.com:doctypes:dita:dtd:concept" "concept.dtd">
<concept id="conceptid">
  <title>Planning a high-availability deployment</title>
  <conbody>
    <p>The recommended deployment architecture includes the following characteristics:</p>
      <ul>
        <li>The primary and secondary nodes each have two NICs, with
          one NIC dedicated to disk synchronization via 
          DRBD, and the other NIC dedicated to <ph keyref="nm-cc"/>
          and application traffic.</li>
        
        <li>If both of the nodes in the high-availability cluster
        have two NICs, the traffic for each NIC must be routed through
        separate subnets.</li>
        
        <li>Application services are deployed
          on dedicated <ph keyref="nm-cc"/> resource pool hosts
          outside of the high-availability cluster.</li>
        
        <li>Fencing is employed on production high-availability clusters.</li>
      </ul>
      
      
    <p>Having two NICs on each HA cluster node allows network traffic required for disk
      synchronization (DRBD) to be separated from network traffic required by the application
      itself. This results in more up-to-date disk synchronization and better network responsiveness
      from the <ph keyref="nm-cc"/> and the application is managing. However, if you do
      not have two identical, dual-NIC machines available, it is still possible to deploy an HA
      cluster with single-NIC servers.</p>
    
    <p>Use two hosts for the <ph keyref="nm-cc"/> master host, where the two are configured in an
      active/passive configuration. These two hosts will only be used for
      running <ph keyref="nm-cc"/> itself. They should not be used for running application
      services. Plan on deploying at least an
      additional two resource pool hosts. Only the <ph keyref="nm-cc"/> master hosts will be
      configured in an active/passive cluster.</p>
    
    <p>Fencing is a critical consideration. Fencing is a technique to ensure that a failed node in
      the cluster is completely stopped. This avoids situations where runaway processes on the
      failed node continue trying to use shared resources, resulting in application conflicts or
      conflicts with the cluster management software. The enormous number of fencing solutions makes
      it impractical for <ph conkeyref="names/company"/> to document solutions for every possible scenario. 
        
      <ph keyref="nm-cc"/> administrators must work with their IT departments to implement a fencing
      solution that works for their particular infrastructure. While fencing is recommended for
      production environments, <ph keyref="nm-cc"/> administrators who want to stand up an initial
      test deployment of a <ph keyref="nm-cc"/> high-availability cluster can do so without fencing, and then add
      fencing later. </p>
  </conbody>
</concept>
