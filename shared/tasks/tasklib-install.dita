<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "urn:pubid:zenoss.com:doctypes:dita:dtd:task" "task.dtd">
<task id="shared">
  <title>DO NOT INCLUDE THIS TOPIC WHOLESALE</title>
  <taskbody>
    
    <steps>
      <step>
        <cmd></cmd>
        <!-- These substeps are used in serviced config file editing procedures -->
        <substeps>
          <substep id="open-file">
            <cmd>Open <filepath>/etc/default/serviced</filepath> in a text editor.</cmd>
          </substep>
          <substep id="uncomment">
            <cmd>Remove the number sign character (<codeph>&#35;</codeph>) from the beginning of the line.</cmd>
          </substep>
          <substep id="save">
            <cmd>Save the file, and then close the editor.</cmd>
          </substep>
        </substeps>
      </step>
      
      <step id="verify-64">
        <cmd>Verify that the host implements the 64-bit version of the x86 instruction set.</cmd>
        <stepxmp>
          <codeblock>uname -m</codeblock>
        </stepxmp>
        <choices>
          <choice>If the output is <codeph>x86_64</codeph>, the architecture is 64-bit. Proceed to
            the next step</choice>
          <choice>If the output is <codeph>i386/i486/i586/i686</codeph>, the architecture is 32-bit.
            Stop this procedure and select a different host.</choice>
        </choices>
      </step>
      
      <step id="localhost-entry">
        <cmd>Add an entry to <filepath>/etc/hosts</filepath> 
          for localhost, if necessary.</cmd>
        <substeps>
          <substep>
            <cmd>Determine whether <codeph>127.0.0.1</codeph>
              is mapped to <codeph>localhost</codeph>.</cmd>
            <stepxmp>
              <codeblock>grep 127.0.0.1 /etc/hosts | grep localhost</codeblock>
            </stepxmp>
            <stepresult>If the preceding commands return no result,
            perform the following substep.</stepresult>
          </substep>
          <substep>
            <cmd>Add an entry to <filepath>/etc/hosts</filepath> for <codeph>localhost</codeph>.</cmd>
            <stepxmp>
              <codeblock>echo "127.0.0.1   localhost" &#62;&#62; /etc/hosts</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="kill-selinux">
        <cmd>Disable Security-Enhanced Linux (SELinux), if installed.</cmd>
        <substeps>
          <substep>
            <cmd>Determine whether SELinux is installed.</cmd>
            <stepxmp>
              <codeblock>test -f /etc/selinux/config &#38;&#38; grep '&#94;SELINUX=' /etc/selinux/config</codeblock>
            </stepxmp>
            <info>If the preceding commands return a result, SELinux is installed.</info>
          </substep>
          <substep>
            <cmd>Set the operating mode to <codeph>disabled</codeph>.</cmd>
            <stepxmp>Open <filepath>/etc/selinux/config</filepath> in a text editor, and change the
              value of the <varname>SELINUX</varname> variable to
              <codeph>disabled</codeph>.</stepxmp>
          </substep>
          <substep>
            <cmd>Confirm the new setting.</cmd>
            <stepxmp><codeblock>grep '&#94;SELINUX=' /etc/selinux/config</codeblock></stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="docker-hub">
        <cmd>Authenticate to the Docker Hub repository.</cmd>
        <info>Replace <varname>USER</varname> and <varname>EMAIL</varname> with the values
          associated with your Docker Hub account.</info>
        <stepxmp>
          <codeblock>docker login -u <varname>USER</varname> -e <varname>EMAIL</varname></codeblock>
        </stepxmp>
        <stepresult>The <cmdname>docker</cmdname> command prompts you for your Docker Hub password,
          and saves a hash of your credentials in the <filepath>$HOME/.dockercfg</filepath> file
          (root user account).</stepresult>
      </step>
      
      <step id="thinpool-rm">
        <cmd>Create a thin pool for application data.</cmd>
        <substeps>
          <substep>
            <cmd>Identify the primary partition for the thin pool to create,
              and the amount of space available on the primary partition.</cmd>
            <stepxmp>
              <codeblock>lsblk --output=NAME,SIZE,TYPE,FSTYPE,MOUNTPOINT</codeblock>
            </stepxmp>
            <stepresult>For more information about the output of 
              the <cmdname>lsblk</cmdname> command and primary partitions, 
              refer to the <cite conkeyref="pubs/cite-plan"/>.</stepresult>
          </substep>
          <substep>
            <cmd>Create a variable for 50% of the space available on the
              primary partition for the thin pool to create.</cmd>
            <info>The thin pool stores application data and snapshots of
            the data. You can add storage to the pool at any time.</info>
            <stepxmp>Replace <varname>Half-Of-Available-Space</varname> with 50% of the space
              available in the primary partition, in gigabytes. Include the symbol for gigabytes
                (<codeph>G</codeph>) after the numeric value.
              <codeblock>myFifty=<varname>Half-Of-Available-Space</varname>G</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Create the thin pool.</cmd>
            <stepxmp>
              <p>Replace <varname>Path-To-Device</varname> with the path of the target primary
                partition:</p>
              <codeblock>serviced-storage create-thin-pool -o dm.basesize=$myFifty \
  serviced <varname>Path-To-Device</varname></codeblock>
            </stepxmp>
            <stepresult>On success, the result includes the name of the thin pool,
              which always starts with <codeph>/dev/mapper</codeph>.</stepresult>
          </substep>
        </substeps>
      </step>
      
      <step id="app-set">
        <cmd>Configure <ph keyref="nm-cc"/> with the name of the thin pool for
          application data.</cmd>
        <info>
          <p>The <ph keyref="nm-cc"/> configuration file is <filepath>/etc/default/serviced</filepath>. 
            (For more information about
            <cmdname>serviced</cmdname> configuration options, refer to the <ph keyref="nm-cc"/>
            online help.) </p>
        </info>
        <substeps>
          <substep conkeyref="tasklib-install/open-file">
            <cmd/>
          </substep>
          <substep>
            <cmd>Locate the <varname>SERVICED_FS_TYPE</varname> declaration.</cmd>
          </substep>
          <substep conkeyref="tasklib-install/uncomment">
            <cmd/>
          </substep>
          <substep>
            <cmd>Add <varname>SERVICED_DM_THINPOOLDEV</varname> immediately after
                <varname>SERVICED_FS_TYPE</varname>.</cmd>
            <stepxmp>
              <p>Replace <varname>Thin-Pool-Name</varname> with the name of the thin pool created
                previously:</p>
              <codeblock>SERVICED_DM_THINPOOLDEV=<varname>Thin-Pool-Name</varname></codeblock>
            </stepxmp>
          </substep>
          <substep conkeyref="tasklib-install/save">
            <cmd/>
          </substep>
        </substeps>
      </step>
      
      <step id="cfg-subnet" importance="optional">
        <cmd>Specify an alternate private subnet for <ph keyref="nm-cc"/>, if
          necessary.</cmd>
        <info>
          <p>The default private subnet may already be in use in your environment. 
            The following variable configures <cmdname>serviced</cmdname> to use an alternate subnet:</p>
          <dl>
            <dlentry conkeyref="serviced-vars/SERVICED_VIRTUAL_ADDRESS_SUBNET">
              <dt/>
              <dd/>
            </dlentry>
          </dl>
        </info>
        <substeps>
          <substep conkeyref="tasklib-install/open-file">
            <cmd/>
          </substep>
          <substep>
            <cmd>Locate the <varname>SERVICED_VIRTUAL_ADDRESS_SUBNET</varname> declaration,
              and then change the value.</cmd>
            <stepxmp>The following example shows the line to change:
              <codeblock># SERVICED_VIRTUAL_ADDRESS_SUBNET=10.3</codeblock></stepxmp>
          </substep>
          <substep conkeyref="tasklib-install/uncomment">
            <cmd/>
          </substep>
          <substep conkeyref="tasklib-install/save">
            <cmd/>
          </substep>
        </substeps>
      </step>
      
      
      
      <step id="master">
        <cmd>Configure <ph keyref="nm-cc"/> to serve as the master and as an agent.</cmd>
        <info>
          <p>The following variables configure <cmdname>serviced</cmdname> to serve as both master and agent:</p>
          <dl>
            <dlentry conkeyref="serviced-vars/SERVICED_AGENT">
              <dt/>
              <dd/>
            </dlentry>
            <dlentry conkeyref="serviced-vars/SERVICED_MASTER">
              <dt/>
              <dd/>
            </dlentry>
          </dl>
        </info>
        <substeps>
          <substep conkeyref="tasklib-install/open-file">
            <cmd/>
          </substep>
          <substep>
            <cmd>Find the <varname>SERVICED_AGENT</varname> declaration, and then change the value
              from <codeph>0</codeph> to <codeph>1</codeph>.</cmd>
            <stepxmp>The following example shows the line to change:
              <codeblock># SERVICED_AGENT=0</codeblock></stepxmp>
          </substep>
          <substep conkeyref="tasklib-install/uncomment">
            <cmd/>
          </substep>
          <substep>
            <cmd>Find the <varname>SERVICED_MASTER</varname> declaration, and then change the value
              from <codeph>0</codeph> to <codeph>1</codeph>.</cmd>
            <stepxmp>The following example shows the line to change:
              <codeblock># SERVICED_MASTER=0</codeblock></stepxmp>
          </substep>
          <substep conkeyref="tasklib-install/uncomment">
            <cmd/>
          </substep>
          <substep conkeyref="tasklib-install/save">
            <cmd/>
          </substep>
        </substeps>
      </step>
      
      <step id="agent">
        <cmd>Configure <ph keyref="nm-cc"/> as an agent of the master host.</cmd>
        <info>
          <p>The following variable configures <cmdname>serviced</cmdname> to serve as agent:</p>
          <dl>
            <dlentry conkeyref="serviced-vars/SERVICED_AGENT">
              <dt/>
              <dd/>
            </dlentry>
            <dlentry conkeyref="serviced-vars/SERVICED_MASTER">
              <dt/>
              <dd/>
            </dlentry>
          </dl>
          <p>In addition, the following lines need to be edited, to replace
              <codeph>&#123;&#123;SERVICED_MASTER_IP&#125;&#125;</codeph> with the IP address of the
            master host:</p>
          <sl>
            <sli><codeph># SERVICED_ZK={{SERVICED_MASTER_IP}}:2181</codeph></sli>
            <sli><codeph># SERVICED_DOCKER_REGISTRY={{SERVICED_MASTER_IP}}:5000</codeph></sli>
            <sli><codeph># SERVICED_ENDPOINT={{SERVICED_MASTER_IP}}:4979</codeph></sli>
            <sli><codeph># SERVICED_LOG_ADDRESS={{SERVICED_MASTER_IP}}:5042</codeph></sli>
            <sli><codeph># SERVICED_LOGSTASH_ES={{SERVICED_MASTER_IP}}:9100</codeph></sli>
            <sli><codeph># SERVICED_STATS_PORT={{SERVICED_MASTER_IP}}:8443</codeph></sli>
          </sl>
        </info>
        <substeps>
          <substep conkeyref="tasklib-install/open-file">
            <cmd/>
          </substep>
          <substep>
            <cmd>Find the <varname>SERVICED_AGENT</varname> declaration, and then change the value
              from <codeph>0</codeph> to <codeph>1</codeph>.</cmd>
            <stepxmp>The following example shows the line to change:
              <codeblock># SERVICED_AGENT=0</codeblock></stepxmp>
          </substep>
          <substep conkeyref="tasklib-install/uncomment">
            <cmd/>
          </substep>
          <substep>
            <cmd>Find the <varname>SERVICED_MASTER</varname> declaration, and then 
              remove the number sign character (<codeph>&#35;</codeph>) from the beginning of the line.</cmd>
          </substep>
          <substep>
            <cmd>Globally replace <codeph>&#123;&#123;SERVICED_MASTER_IP&#125;&#125;</codeph> with
              the IP address of the master host.</cmd>
            <info>
              <note>Remove the number sign character (&#35;) from the beginning of each variable
                declaration that includes the master IP address.</note>
            </info>
          </substep>
          <substep conkeyref="tasklib-install/save">
            <cmd/>
          </substep>
        </substeps>
      </step>
      
      <step id="create-thin-docker">
        <cmd>Create a device mapper thin pool for Docker data.</cmd>
        <substeps>
          <substep>
            <cmd>Identify the primary partition for the thin pool to create.</cmd>
            <stepxmp>
              <codeblock>lsblk --output=NAME,SIZE,TYPE,FSTYPE,MOUNTPOINT</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Create the thin pool.</cmd>
            <stepxmp>
              <p>Replace <varname>Path-To-Device</varname> with the 
                path of an unused primary partition:</p>
              <codeblock>serviced-storage create-thin-pool docker <varname>Path-To-Device</varname></codeblock>
            </stepxmp>
            <stepresult>On success, the result includes the name of the thin pool,
              which always starts with <codeph>/dev/mapper</codeph>.</stepresult>
          </substep>
        </substeps>
      </step>
      
      <step id="agent-default-pool">
        <cmd>Add a resource pool host.</cmd>
        <stepxmp>
          <p>Replace <varname>Hostname-Or-IP</varname> with the hostname 
            or IP address of the resource pool host to add:</p>
          
          <codeblock>serviced host add <varname>Hostname-Or-IP</varname>:4979 default</codeblock>
          
          <p>If you enter a hostname, all hosts in your <ph keyref="nm-cc"/>
            cluster must be able to resolve the name, either
            through an entry in <filepath>/etc/hosts</filepath>, or through a 
            nameserver on your network.</p>
        </stepxmp>
      </step>
      
      <step id="check-storage-master">
        <cmd>Determine whether the available, unused storage is sufficient.</cmd>
        <substeps>
          <substep>
            <cmd>Display the available storage devices.</cmd>
            <stepxmp>
              <codeblock>lsblk --output=NAME,SIZE</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Compare the available storage with the 
              amount required for a <ph keyref="nm-cc"/> master host.</cmd>
            <info>For more information, refer to the <cite conkeyref="pubs/cite-plan"/>.</info>
          </substep>
        </substeps>
      </step>
      
      <step id="check-storage-pool">
        <cmd>Determine whether the available, unused storage is sufficient.</cmd>
        <substeps>
          <substep>
            <cmd>Display the available storage devices.</cmd>
            <stepxmp>
              <codeblock>lsblk --output=NAME,SIZE</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Compare the available storage with the 
              amount required for a resource pool host 
              in your deployment.</cmd>
            <info>In particular, resource pool hosts that are configured as nodes
            in a ZooKeeper ensemble require an additional primary partition for
              <ph keyref="nm-cc"/> internal services data.</info>
            <info>For more information, refer to the <cite conkeyref="pubs/cite-plan"/>.</info>
          </substep>
        </substeps>
      </step>
      
      <step id="check-name-resolution">
        <cmd>Verify that name resolution works on this host.</cmd>
        <stepxmp>
          <codeblock>hostname -i</codeblock>
        </stepxmp>
        <stepresult>If the result is not a valid IPv4 adddress, add an entry
        for the host to the network nameserver, or to <filepath>/etc/hosts</filepath>.</stepresult>
      </step>
      
      <step id="check-hostid">
        <cmd>Verify that the host's numeric identifier is unique.</cmd>
        <info>Each host in a <ph keyref="nm-cc"/> cluster must have a unique host identifier.</info>
        <stepxmp>
          <codeblock>hostid</codeblock>
        </stepxmp>
      </step>

      
      <step id="check-memory-master">
        <cmd>Determine whether the available memory and swap is sufficient.</cmd>
        <substeps>
          <substep>
            <cmd>Display the available memory.</cmd>
            <stepxmp>
              <codeblock>free -h</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Compare the available memory with the 
              amount required for a master host in your deployment.</cmd>
            <info>For more information, refer to the <cite conkeyref="pubs/cite-plan"/>.</info>
          </substep>
        </substeps>
      </step>
     
      <step id="check-memory-pool">
        <cmd>Determine whether the available memory and swap is sufficient.</cmd>
        <substeps>
          <substep>
            <cmd>Display the available memory.</cmd>
            <stepxmp>
              <codeblock>free -h</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Compare the available memory with the 
              amount required for a resource pool host in your deployment.</cmd>
            <info>For more information, refer to the <cite conkeyref="pubs/cite-plan"/>.</info>
          </substep>
        </substeps>
      </step>
      
      <step id="firewall">
        <cmd>Disable the firewall, if necessary.</cmd>
        <info>This step is required for installation but not for deployment. For   
          more information, refer to the <cite conkeyref="pubs/cite-plan"/>.</info>
        <substeps>
          <substep>
            <cmd>Determine whether the <cmdname>firewalld</cmdname> service is enabled.</cmd>
            <stepxmp>
              <codeblock>systemctl status firewalld.service</codeblock>
            </stepxmp>
            <stepresult>
              <ul>
                <li>If the result includes <codeph>Active: inactive (dead)</codeph>,
                  the service is disabled. Proceed to the next step.</li>
                <li>If the result includes <codeph>Active: active (running)</codeph>,
                  the service is enabled. Perform the following substep.</li>
              </ul>
            </stepresult>
          </substep>
          <substep>
            <cmd>Disable the <cmdname>firewalld</cmdname> service.</cmd>
            <stepxmp>
              <codeblock>systemctl stop firewalld &#38;&#38; systemctl disable firewalld</codeblock>
            </stepxmp>
            <stepresult>On success, the preceding commands display messages similar to the following
              example:
              <codeblock>rm '/etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service'
rm '/etc/systemd/system/basic.target.wants/firewalld.service'</codeblock>
            </stepresult>
          </substep>
        </substeps>
      </step>
      
      <step id="update-os">
        <cmd>Update the operating system, if necessary.</cmd>
        <substeps>
          <substep>
            <cmd>Determine which release is installed.</cmd>
            <stepxmp>
              <codeblock>cat /etc/redhat-release</codeblock>
            </stepxmp>
            <stepresult>If the result includes <codeph>7.0</codeph>, perform 
              the following substeps.</stepresult>
          </substep>
          <substep>
            <cmd>Update the operating system.</cmd>
            <stepxmp>
              <codeblock>yum update -y</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Restart the system.</cmd>
            <stepxmp>
              <codeblock>reboot</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="journal" importance="optional">
        <cmd>Enable persistent storage for log files, if desired.</cmd>
        <info>By default, RHEL/CentOS systems store log data only in memory or in a small
          ring-buffer in the <filepath>/run/log/journal</filepath> directory. By performing this
          step, log data persists and can be saved indefinitely, if you implement log file rotation
          practices. For more information, refer to your operating system documentation.</info>
        <stepxmp>
          <codeblock>mkdir -p /var/log/journal &#38;&#38; systemctl restart systemd-journald</codeblock>
        </stepxmp>
      </step>
      
      <step id="dnsmasq">
        <cmd>Enable and start the Dnsmasq package.</cmd>
        <stepxmp>
          <codeblock>systemctl enable dnsmasq &#38;&#38; systemctl start dnsmasq</codeblock>
        </stepxmp>
      </step>
      
      <step id="ntp">
        <cmd>Install and configure the NTP package.</cmd>
        <substeps>
          <substep>
            <cmd>Install the package.</cmd>
            <stepxmp>
              <codeblock>yum install -y ntp</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Set the system time.</cmd>
            <stepxmp><codeblock>ntpd -gq</codeblock></stepxmp>
          </substep>
          <substep>
            <cmd>Enable the <cmdname>ntpd</cmdname> daemon.</cmd>
            <stepxmp>
              <codeblock>systemctl enable ntpd</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Configure <cmdname>ntpd</cmdname> to start when the system starts.</cmd>
            <info>Currently, an unresolved issue associated with NTP
              prevents <cmdname>ntpd</cmdname> from restarting correctly after a reboot. 
              The following commands provide a workaround to ensure that it does. </info>
            <stepxmp>
              <codeblock>echo "systemctl start ntpd" >> /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="nc-online">
        <cmd>Install the <xref keyref="url-nmap-ncat">Nmap Ncat</xref> utility.</cmd>
        <info>The utility is used to verify ZooKeeper ensemble configurations.
        <b>If you are installing a single-host deployment, skip this step</b>.</info>
        <stepxmp>
          <codeblock>yum install -y nmap-ncat</codeblock>
        </stepxmp>
      </step>
      
      <step id="nc-online-pool">
        <cmd>Install the <xref keyref="url-nmap-ncat">Nmap Ncat</xref> utility.</cmd>
        <info>The utility is used to verify ZooKeeper ensemble configurations.
          <b>Perform this step only on the two resource pool hosts that are
            designated for use in the ZooKeeper ensemble</b>.</info>
        <stepxmp>
          <codeblock>yum install -y nmap-ncat</codeblock>
        </stepxmp>
      </step>
      
      <step id="docker-install">
        <cmd>Install Docker <ph keyref="lo-version-docker"/>, and then disable accidental upgrades.</cmd>
        <substeps>
          <substep>
            <cmd>Add the Docker repository to the host's repository list.</cmd>
            <stepxmp>
              <codeblock>cat > /etc/yum.repos.d/docker.repo &lt;&lt;-EOF
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Install Docker <ph keyref="lo-version-docker"/>.</cmd>
            <stepxmp>
              <codeblock>yum clean all &#38;&#38; yum makecache fast
yum install -y docker-engine-<ph keyref="lo-version-docker"/></codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Open <filepath>/etc/yum.repos.d/docker.repo</filepath> with
              a text editor.</cmd>
          </substep>
          <substep>
            <cmd>Change the value of the <codeph>enabled</codeph> key
              from <codeph>1</codeph> to <codeph>0</codeph>.</cmd>
          </substep>
          <substep>
            <cmd>Save the file and close the text editor.</cmd>
          </substep>
        </substeps>
      </step>
      
      <step id="docker-install-offline">
        <cmd>Install Docker <ph keyref="lo-version-docker"/>.</cmd>
        <stepxmp>
          <codeblock>yum clean all &#38;&#38; yum makecache fast
yum install --enablerepo=zenoss-mirror -y docker-engine</codeblock>
        </stepxmp>
      </step>
      
      <step id="docker-tmp">
        <cmd>Create a symbolic link for the Docker temporary directory.</cmd>
        <info>Docker uses its temporary directory to spool images. The
          default directory is <filepath>/var/lib/docker/tmp</filepath>.
          The following command specifies the same directory that 
          <ph keyref="nm-cc"/> uses, <filepath>/tmp</filepath>.
          You can specify any directory that has a minimum of 10GB
          of unused space.</info>
        <substeps>
          <substep>
            <cmd>Create the <codeph>docker</codeph> directory in <filepath>/var/lib</filepath>.</cmd>
            <stepxmp>
              <codeblock>mkdir /var/lib/docker</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Create the link to <filepath>/tmp</filepath>.</cmd>
            <stepxmp>
              <codeblock>ln -s /tmp /var/lib/docker/tmp</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="docker-svc-def">
        <cmd>Create a <cmdname>systemd</cmdname> override file 
          for the Docker service definition.</cmd>
        <substeps>
          <substep>
            <cmd>Create the override directory.</cmd>
            <stepxmp>
              <codeblock>mkdir -p /etc/systemd/system/docker.service.d</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Create the override file.</cmd>
            <stepxmp>
              <codeblock>cat &#60;&#60;EOF &#62; /etc/systemd/system/docker.service.d/docker.conf
[Service]
TimeoutSec=300
EnvironmentFile=-/etc/sysconfig/docker
ExecStart=
ExecStart=/usr/bin/docker daemon \$OPTIONS -H fd:// 
EOF</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Reload the <cmdname>systemd</cmdname> manager configuration.</cmd>
            <stepxmp>
              <codeblock>systemctl daemon-reload</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      
      
      <step id="docker-config">
        <cmd>Configure and start the Docker service.</cmd>
        <substeps>
          <substep>
            <cmd>Create variables for adding arguments to the Docker configuration file.</cmd>
            <info>The <codeph>--exec-opt</codeph> argument is a workaround for <xref
              keyref="url-docker-17653">a Docker issue</xref> on RHEL/CentOS 7.x systems.</info>
            <stepxmp>
              <p>Replace <varname>Thin-Pool-Device</varname> with the name of the thin pool device
                created in the previous step:</p>
              <codeblock>myDriver="-s devicemapper"
myFix="--exec-opt native.cgroupdriver=cgroupfs"
myFlag="--storage-opt dm.thinpooldev"
myPool="<varname>Thin-Pool-Device</varname>"</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Add the arguments to the Docker configuration file.</cmd>
            <stepxmp>
              <codeblock>echo 'OPTIONS="'$myDriver $myFix $myFlag'='$myPool'"' \
  &#62;&#62; /etc/sysconfig/docker</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Start or restart Docker.</cmd>
            <stepxmp>
              <codeblock>systemctl restart docker</codeblock>
            </stepxmp>
            <stepresult>The initial startup takes up to a minute, and may fail. If the startup
              fails, repeat the previous command.</stepresult>
          </substep>
        </substeps>
      </step>
      
      

      <step id="docker-dns-flag">
        <cmd>Configure name resolution in containers.</cmd>
        <info>Each time it starts, <cmdname>docker</cmdname> selects an IPv4 
          subnet for its virtual Ethernet bridge.
          The selection can change; this step ensures consistency.</info>
        <substeps>
          <substep>
            <cmd>Identify the IPv4 subnet and netmask <cmdname>docker</cmdname> 
              has selected for its virtual Ethernet bridge.</cmd>
            <stepxmp>
              <codeblock>ip addr show docker0 | grep inet</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Open <filepath>/etc/sysconfig/docker</filepath> in a text editor.</cmd>
          </substep>
          <substep>
            <cmd>Add the following flags to the end of 
              the <varname>OPTIONS</varname> declaration.</cmd>
            <stepxmp>
              <p>Replace <varname>Bridge-Subnet</varname> with the IPv4 
                subnet <cmdname>docker</cmdname> selected for its
                virtual bridge, and replace <varname>Bridge-Netmask</varname> 
                with the netmask <cmdname>docker</cmdname> selected:</p>
              <codeblock>--dns=<varname>Bridge-Subnet</varname> --bip=<varname>Bridge-Subnet</varname>/<varname>Bridge-Netmask</varname></codeblock>
            </stepxmp>
            <info>For example, if the bridge subnet and netmask is 
              172.17.0.1/16, the flags to add are <codeph>--dns=172.17.0.1 --bip=172.17.0.1/16</codeph>.</info>
            <info>
              <note>Leave a blank space after the end of the thin pool device name,
              and make sure the double quote character (<codeph>&#34;</codeph>)
              is at the end of the line.</note>
            </info>
          </substep>
          <substep>
            <cmd>Restart the Docker service.</cmd>
            <stepxmp><codeblock>systemctl restart docker </codeblock></stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="zenoss-repo">  
        <cmd>Install the <ph conkeyref="names/company"/> repository package.</cmd>
        <substeps>
          <substep>
            <cmd>Install the package.</cmd>
            <stepxmp>
              <codeblock>rpm -ivh http://get.zenoss.io/yum/zenoss-repo-1-1.x86_64.rpm</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Clean out the <cmdname>yum</cmdname> cache directory.</cmd>
            <stepxmp>
              <codeblock>yum clean all</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      
      <step id="fix-nfs">
        <cmd>Configure and restart the NFS server.</cmd>
        <info>Currently, <xref keyref="url-rpcbin-bug">an unresolved issue</xref> prevents the
          NFS server from starting correctly. The following commands provide a workaround to ensure
          that it does. </info>
        <substeps>
          <substep>
            <cmd>Open <filepath>/lib/systemd/system/nfs-server.service</filepath> 
              with a text editor.</cmd>
          </substep>
          <substep>
            <cmd>Change <cmdname>rpcbind.target</cmdname> to <cmdname>rpcbind.service</cmdname> on
              the following line:</cmd>
            <stepxmp>
              <codeblock>Requires= network.target proc-fs-nfsd.mount rpcbind.target</codeblock>
            </stepxmp>
          </substep>
          <substep>
            <cmd>Reload the <cmdname>systemd</cmdname> manager configuration.</cmd>
            <stepxmp>
              <codeblock>systemctl daemon-reload</codeblock>
            </stepxmp>
          </substep>
        </substeps>
      </step>
      
      <step id="install-serviced">
        <cmd>Install <ph keyref="nm-cc"/>.</cmd>
        <info><ph keyref="nm-cc"/> includes a utility that simplifies the process of creating a
          device mapper thin pool.</info>
        <stepxmp>
          <codeblock>yum clean all &#38;&#38; yum makecache fast
yum --enablerepo=zenoss-stable install -y serviced-<ph keyref="lo-version-cc"/></codeblock>
        </stepxmp>
      </step>

      
      <step id="install-serviced-offline">
        <cmd>Install <ph keyref="nm-cc"/>.</cmd>
        <info><ph keyref="nm-cc"/> includes a utility that simplifies the process of creating a
          device mapper thin pool.</info>
        <stepxmp>
          <codeblock>yum clean all &#38;&#38; yum makecache fast
yum --enablerepo=zenoss-mirror install -y serviced</codeblock>
        </stepxmp>
      </step>
    </steps>
  </taskbody>
</task>
